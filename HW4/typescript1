Script started on 2023-11-16 11:25:22-05:00 [TERM="xterm" TTY="/dev/pts/33" COLUMNS="145" LINES="34"]
soyr@pe15:~/cs240/HW4$ ls -l
total 116
-rw-r--r-- 1 soyr cs240-2G   217 Nov 14 21:33 calc.h
-rw-r--r-- 1 soyr cs240-2G    33 Nov 16 11:25 calc.in
-rwxr-xr-x 1 soyr cs240-2G 16392 Nov 14 23:03 calcit
-rw-r--r-- 1 soyr cs240-2G 40166 Nov  7 12:00 dependencytree.png
-rw-r--r-- 1 soyr cs240-2G   596 Nov 14 21:36 getch.c
-rw-r--r-- 1 soyr cs240-2G  1800 Nov 14 21:37 getch.o
-rw-r--r-- 1 soyr cs240-2G   819 Nov 16 11:21 getop.c
-rw-r--r-- 1 soyr cs240-2G  1768 Nov 14 21:37 getop.o
-rw-r--r-- 1 soyr cs240-2G  1633 Nov 14 23:02 main.c
-rw-r--r-- 1 soyr cs240-2G  3508 Nov 14 23:03 main.o
-rw-r--r-- 1 soyr cs240-2G   318 Nov 16 11:14 makefile
-rw-r--r-- 1 soyr cs240-2G   186 Nov 14 21:29 makefile2
-rw-r--r-- 1 soyr cs240-2G  1276 Nov 16 11:19 stack.c
-rw-r--r-- 1 soyr cs240-2G  2852 Nov 14 22:55 stack.o
-rw-r--r-- 1 soyr cs240-2G     0 Nov 16 11:25 typescript1
-rw-r--r-- 1 soyr cs240-2G  6365 Nov 14 21:34 typescript2
soyr@pe15:~/cs240/HW4$ cat cat[Klc.in
292 16 % 292 16 / 16 * + 292 ^ ~
soyr@pe15:~/cs240/HW4$ cat getch.c
/*
 * getch.c
 *
 * getch  returns one  character from stdin 
 * or from the buffer buf if it is not empty
 * ungetch puts one character in the buffer buf 
 */

#include <stdio.h>
#define BUFSIZE 100

char buf[BUFSIZE];        /* buffer for ungetch */
int  bufp = 0;            /* next free position in buf */

int getch(void)           /* get a (possibly pushed back) character */
{
    return(bufp > 0) ? buf[--bufp] : getchar();
}

void ungetch(int c)        /* push character back on input */
{
    if (bufp >= BUFSIZE)
	printf("ungetch: too many character \n");
    else
	buf[bufp++] = c;
}
soyr@pe15:~/cs240/HW4$ cat getop.c
/*
 * getop.c
 *
 * gets the next token: operator or numeric operand
 */


// SAWYER BOWERMAN :)

#include <stdio.h>
#include <ctype.h>
#include "calc.h"

int getop(char s[])
{
    int i, c;

    while ((s[0] = c = getch()) == ' ' || c == '\t')
        ;

    s[1] = '\0';

    if (!isdigit(c) && c != '.')
        return c;  /* not a number */

    /* collect integer part in string s */
    i = 0;
    if (isdigit(c))
        while (isdigit(s[++i] = c = getch()))
            ;

    /* collect fractional part in string s */
    if (c == '.')
        while (isdigit(s[++i] = c = getch()))
            ;

    // bitwise operators
    if (c == '~')
        return c;
    else if (c == '^' || c == '|' || c == '&') {
        return c;
    }

    s[i] = '\0';
    if (c != EOF)
        ungetch(c);

    return NUMBER;
}

soyr@pe15:~/cs240/HW4$ cat main.c
/*
 * main.c
 *
 * reverse polish calculator
 */

#include <stdio.h>
#include "calc.h" /* header file */
#include <stdlib.h>

#define MAXOP 100

int main()
{
    int type;
    int op2;
    char s[MAXOP];

    while ((type = getop(s)) != EOF)
    {
        switch(type)
        {
            case NUMBER:
                push(atoi(s));
                break;
            case '+':
                push(pop() + pop());
                break;
            case '*':
                push(pop() * pop());
                break;
            case '-':
                op2 = pop();
                push(pop() - op2);
                break;
            case '/':
                op2 = pop();
                if (op2 != 0)
                    push(pop() / op2);
                else
                {
                    printf("error: zero divisor\n");
                    exit(1);
                }
                break;
            case '\n':
                printf("The answer is %d\n", pop());
                break;

            // Bitwise cases
            case '^':
                bitwiseXOR();
                break;
            case '|':
                bitwiseOR();
                break;
            case '&':
                bitwiseAND();
                break;
            case '~':
                bitwiseNOT();
                break;

            case '%':
                // Handle modulo operation
                op2 = pop();
                push(pop() % op2);
                break;

            default:
                printf("error: unknown command %s\n", s);
                exit(1);
        }
    }

    return 0;
}

soyr@pe15:~/cs240/HW4$ cat sc[Ktack.c
/*
 * stack.c
 *
 * stack routines
 */

#include <stdio.h>
#include "calc.h"
#define MAXVAL 100  /* maximum depth of val stack */

/* even better, we could make the following two defines "static"
   and thus hide these data structures from the rest of the sources */
static int sp = 0;         /* next free stack position */
static int val[MAXVAL]; /* value stack */


/* push: push f onto value stack */
void push(int f)
{
    if (sp < MAXVAL)
	val[sp++] = f;
    else
	printf("error: stack full, can't push %d\n", f);
}

/* pop: pop and return top value from stack */

int pop(void)
{
    if (sp > 0)
	return val[--sp];
    else
      {
	printf("error: stack empty\n");
	return 0;
      }
}


// bitwise operators

void bitwiseXOR(void) {

    if(sp >= 2){
        push(pop() ^ pop());
    } else {
	printf("error: not enough arguments for XOR\n");
	}
}

void bitwiseOR(void) {

    if(sp >= 2) {
        push(pop() | pop());
    } else {
	printf("error: not enough arguments for OR\n");
    }
    
}

void bitwiseAND(void) {

    if(sp >= 2) {
        push(pop() & pop());
	} else {
		printf("error: not enough arguments for AND\n");
	}
}

void bitwiseNOT(void) {

    if(sp >= 1) {
        push(~pop());
    } else {
	printf("error: not enough arguments for NOT\n");
	}
}
soyr@pe15:~/cs240/HW4$ make
gcc -m32 -c getop.c
gcc -m32 -c stack.c
gcc -m32 main.o getch.o getop.o stack.o -o calcit
soyr@pe15:~/cs240/HW4$ ./ cal[K[K[K[Kcalcit
292 16 % 292 16 / 16 * + 292 ^ ~
The answer is -1
^Z
[1]+  Stopped                 ./calcit
soyr@pe15:~/cs240/HW4$ cat
thank you !  !
thank you!
^Z
[2]+  Stopped                 cat
soyr@pe15:~/cs240/HW4$ exit
exit
There are stopped jobs.
soyr@pe15:~/cs240/HW4$ ei[Kxit
exit

Script done on 2023-11-16 11:26:59-05:00 [COMMAND_EXIT_CODE="1"]
